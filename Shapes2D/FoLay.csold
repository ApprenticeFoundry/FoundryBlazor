using System;
using System.Collections.Generic;

public class FoLayoutNode<V> : IHasRectangle where V : FoGlyph2D
{
    // Existing properties and methods...

    public FoPoint2D GetPosition()
    {
        return new FoPoint2D(X, Y);
    }

    public void ApplyForce(double fx, double fy)
    {
        Dx += fx / Mass;
        Dy += fy / Mass;
    }

    public void UpdatePosition(double damping)
    {
        Dx *= damping;
        Dy *= damping;
        X += Dx;
        Y += Dy;
    }
}

public class FoGlyph2D
{
    // Add any properties required for your FoGlyph2D class
}

// Your FoLayoutLink class implementation...

public class FoPoint2D
{
    // Your FoPoint2D class implementation...
}

public class ForceDirectedLayout
{
    private List<FoLayoutNode<FoGlyph2D>> nodes;
    private List<FoLayoutLink<FoShape1D, FoShape2D>> edges;

    public ForceDirectedLayout(List<FoLayoutNode<FoGlyph2D>> nodes, List<FoLayoutLink<FoShape1D, FoShape2D>> edges)
    {
        this.nodes = nodes;
        this.edges = edges;
    }

    private void ApplySpringForces()
    {
        double springConstant = 0.1;

        foreach (var edge in edges)
        {
            var sourceNode = edge.GetSourceNode();
            var targetNode = edge.GetSinkNode();

            var dx = targetNode.X - sourceNode.X;
            var dy = targetNode.Y - sourceNode.Y;
            var distance = Math.Sqrt(dx * dx + dy * dy);

            var force = (distance - springConstant) / distance;

            var fx = force * dx;
            var fy = force * dy;

            sourceNode.ApplyForce(fx, fy);
            targetNode.ApplyForce(-fx, -fy);
        }
    }

    private void ApplyRepellingForces()
    {
        double repellingForce = 50.0;

        for (int i = 0; i < nodes.Count; i++)
        {
            for (int j = i + 1; j < nodes.Count; j++)
            {
                var nodeA = nodes[i];
                var nodeB = nodes[j];

                var dx = nodeB.X - nodeA.X;
                var dy = nodeB.Y - nodeA.Y;
                var distance = Math.Sqrt(dx * dx + dy * dy);

                if (distance > 0)
                {
                    var force = repellingForce / (distance * distance);

                    var fx = force * dx;
                    var fy = force * dy;

                    nodeA.ApplyForce(-fx, -fy);
                    nodeB.ApplyForce(fx, fy);
                }
            }
        }
    }

    public void UpdateLayout()
    {
        double alpha = 0.1;
        double alphaDamping = 0.9;
        int iterations = 300;

        for (int i = 0; i < iterations; i++)
        {
            // Reset forces
            foreach (var node in nodes)
            {
                node.Dx = 0;
                node.Dy = 0;
            }

            // Apply forces
            ApplySpringForces();
            ApplyRepellingForces();

            // Update node positions
            foreach (var node in nodes)
            {
                node.UpdatePosition(alpha);
            }

            // Reduce the simulation's effect (alpha damping)
            alpha *= alphaDamping;
        }
    }
}
